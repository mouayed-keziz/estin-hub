// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Blog {
    id          String        @id @default(cuid())
    title       String        @db.VarChar(256)
    image       String
    content     String        @db.VarChar(10000)
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    author      User          @relation(name: "BlogToUser", fields: [createdById], references: [id])
    createdById String
    comments    Comment[]     @relation(name: "BlogToComment")
    tags        String        @default("[]")
    blog_rating Blog_rating[] @relation(name: "BlogToblog_rating")
    rating      Int?          @default(0)
    saved_by    User[]        @relation(name: "BlogToUser1")

    @@index([title])
    @@index([createdById])
}

model Comment {
    id          String   @id @default(cuid())
    content     String   @db.VarChar(256)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    blogId      String
    createdBy   User     @relation(name: "CommentToUser", fields: [createdById], references: [id])
    createdById String
    blog        Blog     @relation(name: "BlogToComment", fields: [blogId], references: [id])

    @@index([createdById])
    @@index([blogId])
}

// Necessary for Next auth

model User {
    id            String                @id @default(cuid())
    name          String?
    email         String?               @unique
    emailVerified DateTime?
    image         String?
    role          ROLE                  @default(STUDENT)
    accounts      Account[]             @relation(name: "AccountToUser")
    sessions      Session[]             @relation(name: "SessionToUser")
    blogs         Blog[]                @relation(name: "BlogToUser")
    comments      Comment[]             @relation(name: "CommentToUser")
    events        Event[]               @relation(name: "EventToUser")
    announcements Object_announcement[] @relation(name: "object_announcementToUser")
    ratings       Blog_rating[]         @relation(name: "blog_ratingToUser")
    bio           String?               @db.VarChar(256)
    level         String?
    createdAt     DateTime              @default(now())
    updatedAt     DateTime              @updatedAt
    saved_blogs   Blog[]                @relation(name: "BlogToUser1")

    @@index(email)
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(name: "AccountToUser", fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(name: "SessionToUser", fields: [userId], references: [id])

    @@index([userId])
}

model Event {
    id     String   @id @default(cuid())
    name   String
    date   DateTime
    userId String?
    club   User?    @relation(name: "EventToUser", fields: [userId], references: [id])
    link   String?

    @@index([userId])
}

model Object {
    id                  String               @id @default(cuid())
    name                String
    description         String?
    image               String?
    object_announcement Object_announcement? @relation(name: "objetToobject_announcement")
}

model Object_announcement {
    id       String         @id @default(cuid())
    status   OBJECT_STATUS? @default(LOST)
    userId   String?
    owner    User?          @relation(name: "object_announcementToUser", fields: [userId], references: [id])
    object   Object         @relation(name: "objetToobject_announcement", fields: [objectId], references: [id])
    objectId String         @unique

    @@index([userId])
}

model Blog_rating {
    id     String  @id @default(cuid())
    userId String?
    user   User?   @relation(name: "blog_ratingToUser", fields: [userId], references: [id])
    blog   Blog?   @relation(name: "BlogToblog_rating", fields: [blogId], references: [id])
    blogId String?
    rating Int?    @default(0)

    @@index([userId])
    @@index([blogId])
}

enum ROLE {
    STUDENT
    TEACHER
    CLUB
}

enum OBJECT_STATUS {
    FOUND
    LOST
}
